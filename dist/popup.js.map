{
  "version": 3,
  "sources": ["../node_modules/loglevel/lib/loglevel.js", "../src/log.js", "../src/api.js", "../src/popup.js"],
  "sourcesContent": ["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n", "import loglevel from 'loglevel'\n\nif (process.env.NODE_ENV !== 'production') loglevel.setLevel('debug')\n\nexport default loglevel\n", "import log from './log' // eslint-disable-line\n\nconst requestProps = (reviewToken, extraProps = {}) => {\n  const defaultProps = {\n    async: true,\n    headers: {\n      Authorization: 'Bearer ' + reviewToken,\n      'Content-Type': 'application/json'\n    },\n    contentType: 'json'\n  }\n  return { ...defaultProps, ...extraProps }\n}\n\nconst verifyReviewTokenValid = (reviewToken, authUrl) => new Promise((resolve, reject) => {\n  const authStatusUrl = `${authUrl}/status`\n\n  return fetch(authStatusUrl, requestProps(reviewToken, { method: 'GET' }))\n    .then(response => response.json()\n      .then((json) => {\n        resolve(json.message !== 'missing user' && response.status === 200)\n      })\n    ).catch((e) => {\n      reject(e)\n    })\n})\n\nexport default {\n  requestProps,\n  verifyReviewTokenValid\n}\n", "import log from './log' // eslint-disable-line\nimport api from './api' // eslint-disable-line\n\nchrome.storage.local.get('reviewToken')\n  .then(data => data.reviewToken)\n  .then(reviewToken => {\n    if (typeof (reviewToken) === 'undefined' || reviewToken === null) {\n      loginTime()\n    } else {\n      // window.reviewToken = reviewToken\n      checkReviewToken(reviewToken)\n    }\n  })\n\nchrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n  // since only one tab should be active and in the current window at once\n  // the return variable should only have one entry\n  const activeTab = tabs[0]\n  // window.storedTabUrl = activeTab.url // this is available in updateReviewFields\n  // log.debug(tabs[0])\n  updateReviewFields(activeTab.url, activeTab.title)\n})\n\n// getStoredReviewToken()\n// setReviewPageData()\n\n// Close the popup\n// window.close()\n\nconst checkReviewToken = async function (token) {\n  const authUrl = formAuthUrl()\n  // pause and rerun if DOM hasn't loaded\n  if (typeof (authUrl) === 'undefined' || authUrl === null) {\n    log.debug(`authUrl not present in DOM, trying later (${token})`)\n    return setTimeout(checkReviewToken, 50, token)\n  }\n  log.debug('checking review token:', token)\n  const result = await api.verifyReviewTokenValid(token, authUrl)\n  if (!result) { loginTime() }\n}\n\nconst updateReviewFields = (tabUrl, title) => {\n  // pause and rerun if DOM hasn't loaded\n  const reviewUrlField = document.getElementById('review_submitted_url')\n  if (typeof (reviewUrlField) === 'undefined' || reviewUrlField === null) {\n    log.debug('authUrl not present in DOM, trying later')\n    return setTimeout(reviewUrlField, 50, tabUrl, title)\n  }\n  reviewUrlField.value = tabUrl\n  document.getElementById('review_citation_title').value = title\n}\n\nconst formAuthUrl = () => document.getElementById('new_user')?.getAttribute('action')\n// const formNewReviewUrl = () => document.getElementById('new_review_form')?.getAttribute('action')\n\nconst loginTime = () => {\n  log.debug(\"it's login time\")\n  // pause and rerun if DOM hasn't loaded\n  const loginForm = document.getElementById('login-form')\n  if (typeof (loginForm) === 'undefined' || loginForm === null) {\n    log.debug('login form not present in DOM, trying later')\n    return setTimeout(loginTime, 50)\n  }\n  // Remove the existing data that is incorrect - maybe actually do in form submit?\n  // chrome.storage.local.remove(\"reviewToken\")\n  // window.reviewToken = undefined\n  loginForm?.classList.remove('hidden')\n  document.getElementById('new_review')?.classList?.add('hidden')\n}\n\n// chrome.storage.local.remove(\"reviewToken\")\n// chrome.storage.local.set({\"reviewToken\": \"xxxxxx\"})\n"],
  "mappings": "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",
  "names": ["loglevel"]
}
